Metadata-Version: 1.0
Name: lxml
Version: 3.0alpha2
Summary: Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API.
Home-page: http://lxml.de/
Author: lxml dev team
Author-email: lxml-dev@lxml.de
License: UNKNOWN
Download-URL: http://pypi.python.org/packages/source/l/lxml/lxml-3.0alpha2.tar.gz
Description: lxml is a Pythonic, mature binding for the libxml2 and libxslt libraries.  It
        provides safe and convenient access to these libraries using the ElementTree
        API.
        
        It extends the ElementTree API significantly to offer support for XPath,
        RelaxNG, XML Schema, XSLT, C14N and much more.
        
        To contact the project, go to the `project home page
        <http://lxml.de/>`_ or see our bug tracker at
        https://launchpad.net/lxml
        
        In case you want to use the current in-development version of lxml,
        you can get it from the github repository at
        https://github.com/lxml/lxml .  Note that this requires Cython to
        build the sources, see the build instructions on the project home
        page.  To the same end, running ``easy_install lxml==dev`` will
        install lxml from
        https://github.com/lxml/lxml/tarball/master#egg=lxml-dev if you have
        an appropriate version of Cython installed.
        
        3.0alpha2 (2012-08-23)
        ======================
        
        Features added
        --------------
        
        * The ``.iter()`` method of elements now accepts ``tag`` arguments like
          ``"{*}name"`` to search for elements with a given local name in any
          namespace. With this addition, all combinations of wildcards now work
          as expected:
          ``"{ns}name"``, ``"{}name"``, ``"{*}name"``, ``"{ns}*"``, ``"{}*"``
          and ``"{*}*"``.  Note that ``"name"`` is equivalent to ``"{}name"``,
          but ``"*"`` is ``"{*}*"``.
          The same change applies to the ``.getiterator()``, ``.itersiblings()``,
          ``.iterancestors()``, ``.iterdescendants()``, ``.iterchildren()``
          and ``.itertext()`` methods;the ``strip_attributes()``,
          ``strip_elements()`` and ``strip_tags()`` functions as well as the
          ``iterparse()`` class.
        
        * C14N allows specifying the inclusive prefixes to be promoted
          to top-level during exclusive serialisation.
        
        Bugs fixed
        ----------
        
        * Passing long Unicode strings into the ``feed()`` parser interface
          failed to read the entire string.
        
        Other changes
        -------------
        
        * The code was adapted to work with the upcoming libxml2 2.9.0 release.
        
        
        
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Cython
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.4
Classifier: Programming Language :: Python :: 2.5
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.1
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: C
Classifier: Operating System :: OS Independent
Classifier: Topic :: Text Processing :: Markup :: HTML
Classifier: Topic :: Text Processing :: Markup :: XML
Classifier: Topic :: Software Development :: Libraries :: Python Modules
